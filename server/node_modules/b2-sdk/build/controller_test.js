"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test = require("blue-tape");
const test_1 = require("./test");
const controller_1 = require("./controller");
function getController() {
    return __awaiter(this, void 0, void 0, function* () {
        return new controller_1.B2Controller(yield test_1.getTestClient(), "/sdk_test");
    });
}
test("B2Controller.listAll", function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        const f = yield getController();
        const files = yield f.listAll();
        t.assert(Array.isArray(files), "works");
        t.equal(files.length, 1);
        t.equal(files[0].handle, "test_controller");
    });
});
test("B2Controller.get", function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        const f = yield getController();
        const c = yield f.get("fb7fffcb-a1d4-4397-bc71-06055c468c3b");
        t.assert(c && typeof c === "object", "works");
        t.assert(c.handle === "test_controller", "works");
        t.assert(c.default_path === "/888", "works");
    });
});
test("B2Controller.create", function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        const f = yield getController();
        const controller = yield f.create({
            handle: "test_crontroller_b2",
            methods: ["GET"]
        });
        t.assert(typeof controller.id === "string", "has id");
        t.assert(typeof controller.created_at === "string", "has created_at");
        yield f.delete(controller.id);
    });
});
test("B2Controller.update", function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        const f = yield getController();
        const controllerBefore = yield f.create({
            handle: "test_crontroller_b2",
            methods: ["GET"]
        });
        const controllerAfter = yield f.update(Object.assign({}, controllerBefore, {
            methods: ["POST"]
        }));
        t.deepEqual(controllerAfter.methods, ["POST"]);
        yield f.delete(controllerAfter.id);
    });
});
test("B2Controller.delete", function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        const f = yield getController();
        const controller = yield f.create({
            handle: "test_crontroller_delete_b2",
            methods: ["GET"]
        });
        yield f.delete(controller.id);
        t.shouldFail(f.get(controller.id));
    });
});
test("B2Controller.run", function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        const f = yield getController();
        const r = yield f.run({
            method: "GET",
            script: "(function *(context) {\n  return {\n  v:666  \n  }\n})"
        });
        t.deepEqual(r, { v: 666 });
    });
});
//# sourceMappingURL=controller_test.js.map