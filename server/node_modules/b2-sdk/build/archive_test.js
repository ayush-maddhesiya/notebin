"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test = require("blue-tape");
const test_1 = require("./test");
const archive_1 = require("./archive");
const fs = require("fs");
function get() {
    return __awaiter(this, void 0, void 0, function* () {
        return new archive_1.B2Archive(yield test_1.getTestClient());
    });
}
test("B2Archive.inspect", function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        const a = yield get();
        const meta = yield a.inspect();
    });
});
test("B2Archive.exportArchive", function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        const a = yield get();
        let providers = ['sdk_test_page'];
        yield a.exportArchive('./test_export.b2archive', providers);
        let meta = JSON.parse(fs.readFileSync('./test_export.b2archive.metadata.json', 'utf8'))['metadata'];
        t.deepEqual(meta.providers.map((p) => p.id).sort(), providers, 'single provider');
        fs.unlinkSync('./test_export.b2archive');
        fs.unlinkSync('./test_export.b2archive.metadata.json');
        providers = ['sdk_test_page', 'sdk_test_schema'];
        yield a.exportArchive('./test_export.b2archive', providers);
        meta = JSON.parse(fs.readFileSync('./test_export.b2archive.metadata.json', 'utf8'))['metadata'];
        t.deepEqual(meta.providers.map((p) => p.id).sort(), providers, 'multiple provider');
        fs.unlinkSync('./test_export.b2archive');
        fs.unlinkSync('./test_export.b2archive.metadata.json');
    });
});
test("B2Archive.importArchive", function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        const a = yield get();
        yield a.exportArchive('./test_import.b2archive', ['sdk_test_page', 'sdk_test_schema']);
        yield a.importArchive('./test_import.b2archive');
        fs.unlinkSync('./test_import.b2archive');
        fs.unlinkSync('./test_import.b2archive.metadata.json');
    });
});
//# sourceMappingURL=archive_test.js.map