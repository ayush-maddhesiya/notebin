import axios, { Method, AxiosRequestConfig } from "axios";
import url = require("url");
import { parseMeta, B2Meta } from "./meta";

export interface B2ClientConfig {
  endpoint: string;
  token: string;
}

export class B2Client {
  private config: B2ClientConfig;

  constructor(config: B2ClientConfig) {
    this.config = config;
  }

  get endpoint() {
    return this.config.endpoint;
  }

  url(path: string, query: {} = {}): string {
    const u = url.parse(path, true);
    u.query = Object.assign({}, u.query, query);
    return url.format(u);
  }

  configureQuery(query: any = {}) {
    query["auth_token"] = this.config.token;
    return query;
  }

  async request(
    method: string,
    path: string,
    body: any = undefined,
    config: AxiosRequestConfig = {}
  ): Promise<any> {
    const url = `${this.config.endpoint}${path}`;
    return axios
      .request({
        ...config,
        params: {
          ...config.params,
          auth_token: this.config.token
        },
        method: method as Method,
        url,
        data: body
      })
      .then(
        res => {
          return res.data;
        },
        err => {
          if (!err.response || !err.response.data) {
            return Promise.reject({
              status: 0,
              method,
              message: err.message || `Internal error`,
              url,
              body: null
            });
          }

          const body = err.response.data;
          const status = err.response.status;

          return Promise.reject({
            status,
            url,
            method,
            message:
              body &&
              typeof body === "object" &&
              typeof body.message === "string"
                ? body.message
                : "Internal error",
            body
          });
        }
      );
  }

  async inspect(): Promise<B2Meta> {
    return parseMeta(await this.request("GET", "/b2.json"));
  }
}
