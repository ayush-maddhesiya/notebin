import { B2Client } from "./client";
import { SnapshotItem } from "./archive";

export interface FileListEntry {
  id: string;
  handle: string;
  path: string;
  type: string;
  controller_id?: string;
  override_params?: {};
  created_at: string;
  updated_at: string;
}

export interface FileEntry {
  id?: string;
  handle?: string;
  override_params?: {};
  path?: string;
  revision?: string;
  type: string;
  content: string;
  controller_id?: string;
  children?: FileEntry[];
  created_at?: string;
  updated_at?: string;
}

export function getComponentStyleFile(f: FileEntry): FileEntry {
  return f.children ? f.children.find(c => c.type === "less") : null;
}

export interface ComponentFileConfig {
  handle: string;
  path: string;
  override_params?: {};
  template: string;
  style?: string;
}

export interface StyleFileConfig {
  handle: string;
  style: string;
}

/** File factory */
export class B2FileType {
  static createComponentFile(config: ComponentFileConfig): FileEntry {
    return {
      type: "huz",
      handle: config.handle,
      path: config.path || "",
      override_params: config.override_params || {},
      content: config.template,
      children: [{ type: "less", content: config.style || "" }]
    };
  }

  static createStyleFile(config: StyleFileConfig): FileEntry {
    return {
      type: "less",
      handle: config.handle,
      content: config.style
    };
  }
}

export class B2File {
  private c: B2Client;
  private path: string;

  constructor(
    client: B2Client,
    entryPath: string,
    public readonly isRef: boolean = false
  ) {
    this.c = client;
    this.path = `${entryPath}/page/file`;
  }

  /** List all files */
  async listAll(): Promise<FileListEntry[]> {
    return await this.c.request("GET", this.path);
  }

  /** Get a file by id */
  async get(id: string): Promise<FileEntry> {
    return await this.c.request("GET", `${this.path}/${id}`);
  }

  /** Get a file by handle */
  async getByHandle(handle: string): Promise<FileEntry> {
    return await this.c.request("GET", `${this.path}-by-handle/${handle}`);
  }

  /** Create file */
  async create(file: FileEntry): Promise<FileEntry> {
    return await this.c.request("POST", this.path, file);
  }

  /** Update file */
  async update(file: FileEntry): Promise<FileEntry> {
    return await this.c.request(
      "PUT",
      `${this.path}/${file.id}?revision=${file.revision}`,
      file
    );
  }

  /** Delete file by id */
  async delete(id: string) {
    return await this.c.request("DELETE", `${this.path}/${id}`);
  }

  /** Walk all files */
  async walk(
    fn: (file: FileEntry, index: number, total: number) => Promise<void>
  ) {
    const files = await this.listAll();
    for (let i = 0; i < files.length; i++) {
      const file = await this.get(files[i].id);
      await fn(file, i, files.length);
    }
  }

  /** Walk file, if fn returns true, update file */
  async walkAndUpdate(
    fn: (file: FileEntry, index: number, total: number) => Promise<boolean>
  ) {
    const self = this;
    await this.walk(async function(file, i, n) {
      const save = await fn(file, i, n);
      if (save) {
        await self.update(file);
      }
    });
  }

  async getSnapshot(): Promise<SnapshotItem[]> {
    return await this.c.request("GET", `${this.path}-snapshot`);
  }

  async getSnapshotItems(items: SnapshotItem[]): Promise<FileEntry[]> {
    return await this.c.request("POST", `${this.path}-snapshot-items`, items);
  }
}
