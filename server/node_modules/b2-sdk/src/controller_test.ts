import test = require("blue-tape");
import { getTestClient } from "./test";
import { B2Controller } from "./controller";

async function getController() {
  return new B2Controller(await getTestClient(), "/sdk_test");
}

test("B2Controller.listAll", async function(t) {
  const f = await getController();
  const files = await f.listAll();
  t.assert(Array.isArray(files), "works");
  t.equal(files.length, 1);
  t.equal(files[0].handle, "test_controller");
});

test("B2Controller.get", async function(t) {
  const f = await getController();
  const c = await f.get("fb7fffcb-a1d4-4397-bc71-06055c468c3b");
  t.assert(c && typeof c === "object", "works");
  t.assert(c.handle === "test_controller", "works");
  t.assert(c.default_path === "/888", "works");
});

test("B2Controller.create", async function(t) {
  const f = await getController();
  const controller = await f.create({
    handle: "test_crontroller_b2",
    methods: ["GET"]
  });
  t.assert(typeof controller.id === "string", "has id");
  t.assert(typeof controller.created_at === "string", "has created_at");
  await f.delete(controller.id);
});

test("B2Controller.update", async function(t) {
  const f = await getController();

  const controllerBefore = await f.create({
    handle: "test_crontroller_b2",
    methods: ["GET"]
  });
  const controllerAfter = await f.update(
    Object.assign({}, controllerBefore, {
      methods: ["POST"]
    })
  );
  t.deepEqual(controllerAfter.methods, ["POST"]);
  await f.delete(controllerAfter.id);
});

test("B2Controller.delete", async function(t) {
  const f = await getController();
  const controller = await f.create({
    handle: "test_crontroller_delete_b2",
    methods: ["GET"]
  });
  await f.delete(controller.id);
  t.shouldFail(f.get(controller.id));
});

test("B2Controller.run", async function(t) {
  const f = await getController();
  const r = await f.run({
    method: "GET",
    script: "(function *(context) {\n  return {\n  v:666  \n  }\n})"
  });
  t.deepEqual(r, { v: 666 });
});
