"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test = require("blue-tape");
const test_1 = require("./test");
const file_1 = require("./file");
const PromiseBluebird = require("bluebird");
function getFile() {
    return __awaiter(this, void 0, void 0, function* () {
        return new file_1.B2File(yield test_1.getTestClient(), "/sdk_test");
    });
}
test("B2File.listAll", function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        const f = yield getFile();
        const files = yield f.listAll();
        t.assert(Array.isArray(files), "works");
    });
});
test("B2File.get", function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        const f = yield getFile();
        const file = yield f.get("550edd05-e110-479a-8e5d-da259cb16e1b");
        t.assert(file && typeof file === "object", "works");
    });
});
test("B2File.get-by-handle", function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        const f = yield getFile();
        const file = yield f.getByHandle("test");
        t.assert(file &&
            typeof file === "object" &&
            file.id === "550edd05-e110-479a-8e5d-da259cb16e1b", "works");
    });
});
test("B2File.create", function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        const f = yield getFile();
        const file = file_1.B2FileType.createComponentFile({
            handle: "test_create_file",
            path: "/test_create_file",
            template: "CREATED BY SDK!",
            style: "body { color: green; }"
        });
        const serverFile = yield f.create(file);
        t.assert(serverFile && typeof serverFile === "object", "works");
        yield f.delete(serverFile.id);
    });
});
test("B2File.update", function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        const f = yield getFile();
        const file = file_1.B2FileType.createComponentFile({
            handle: "test_update_file",
            path: "/test_update_file",
            template: "CREATED BY SDK!",
            style: "body { color: green; }"
        });
        let serverFile = yield f.create(file);
        serverFile.content = "UPDATED!";
        serverFile.path = "/test_updated_";
        yield f.update(serverFile);
        serverFile = yield f.get(serverFile.id);
        t.deepEqual({
            content: serverFile.content,
            path: serverFile.path
        }, {
            content: "UPDATED!",
            path: "/test_updated_"
        }, "works");
        yield f.delete(serverFile.id);
    });
});
test("B2File.delete", function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        const f = yield getFile();
        const file = file_1.B2FileType.createComponentFile({
            handle: "test_delete_file",
            path: "/test_create_file",
            template: "CREATED BY SDK!",
            style: "body { color: green; }"
        });
        let serverFile = yield f.create(file);
        yield f.delete(serverFile.id);
        yield t.shouldFail(f.get(serverFile.id));
    });
});
test("B2File.walk", function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        const createdIds = [];
        const f = yield getFile();
        for (let i = 0; i < 5; i++) {
            const file = file_1.B2FileType.createComponentFile({
                handle: "test_walk_" + i,
                path: "/test_walk_" + i,
                template: "content_" + i,
                style: "body { color: green; }"
            });
            const serverFile = yield f.create(file);
            createdIds.push(serverFile.id);
        }
        const ids = [];
        yield f.walk(function (file, i, n) {
            return __awaiter(this, void 0, void 0, function* () {
                if (createdIds.indexOf(file.id) !== -1) {
                    ids.push(file.id);
                }
            });
        });
        t.equal(ids.length, createdIds.length, "works");
        yield PromiseBluebird.map(createdIds, id => f.delete(id));
    });
});
test("B2File.walkAndUpdate", function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        const createdIds = [];
        const f = yield getFile();
        for (let i = 0; i < 3; i++) {
            const file = file_1.B2FileType.createComponentFile({
                handle: "walkAndUpdate_" + i,
                path: "/walkAndUpdate_" + i,
                template: "content_" + i,
                style: "body { color: green; }"
            });
            const serverFile = yield f.create(file);
            createdIds.push(serverFile.id);
        }
        const ids = [];
        yield f.walkAndUpdate(function (file, i, n) {
            return __awaiter(this, void 0, void 0, function* () {
                if (createdIds.indexOf(file.id) === -1) {
                    return;
                }
                file.content += "!";
                return true;
            });
        });
        for (let i = 0; i < 3; i++) {
            const file = yield f.get(createdIds[i]);
            t.equal(file.content, "content_" + i + "!");
        }
        yield PromiseBluebird.map(createdIds, id => f.delete(id));
    });
});
//# sourceMappingURL=file_test.js.map