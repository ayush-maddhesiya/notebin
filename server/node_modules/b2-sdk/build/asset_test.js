"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test = require("blue-tape");
const test_1 = require("./test");
const asset_1 = require("./asset");
function getAsset() {
    return __awaiter(this, void 0, void 0, function* () {
        return new asset_1.B2Asset(yield test_1.getTestClient());
    });
}
test("B2File.listAll", function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        const a = yield getAsset();
        const files = yield a.list("/test");
        t.assert(Array.isArray(files), "works");
        t.assert(files.some(f => f.name === "hello.txt"));
    });
});
test("B2File.delete", function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        const a = yield getAsset();
        yield a.upload("/test", [
            {
                filename: "test_delete.txt",
                content: Buffer.from("test_delete")
            }
        ]);
        let files = yield a.list("/test");
        t.assert(files.some(f => f.name === "test_delete.txt"));
        yield a.delete("/test/test_delete.txt");
        files = yield a.list("/test");
        t.assert(files.every(f => f.name !== "test_delete.txt"));
    });
});
test("B2File.upload", function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        const a = yield getAsset();
        const urls = yield a.upload("/test", [
            {
                filename: "upload_test_1.txt",
                content: Buffer.from("test_1")
            }
        ]);
        t.assert(Array.isArray(urls), "works");
        const files = yield a.list("/test");
        t.assert(files.some(f => f.name === "upload_test_1.txt"));
        yield a.delete("/test/upload_test_1.txt");
    });
});
//# sourceMappingURL=asset_test.js.map