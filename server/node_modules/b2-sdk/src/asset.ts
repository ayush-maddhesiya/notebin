import { B2Client } from "./client";
import { Readable } from "stream";
import * as FormData from "form-data";
import * as Path from "path";

export interface AssetEntry {
  name: string;
  size: number;
  mtime: string;
  is_dir: boolean;
}

export interface UploadFile {
  filename: string;
  content: Buffer | Readable;
}

export class B2Asset {
  private c: B2Client;

  constructor(client: B2Client, private path = "/asset") {
    this.c = client;
  }

  /** List files */
  async list(path: string = "/"): Promise<AssetEntry[]> {
    return await this.c.request("GET", this.path, null, {
      params: {
        path
      }
    });
  }

  async upload(path: string, files: UploadFile[]): Promise<string[]> {
    const form = new FormData();
    for (const f of files) {
      form.append("files[]", f.content, f.filename);
    }
    return await this.c.request("POST", this.path, form, {
      headers: form.getHeaders(),
      params: { path: Path.join("/", path) + "/" }
    });
  }

  async delete(path: string): Promise<void> {
    return await this.c.request(
      "DELETE",
      `${this.path}/${encodeURIComponent(path)}`
    );
  }
}
