"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class B2Controller {
    constructor(client, entryPath, isRef = false) {
        this.isRef = isRef;
        this.c = client;
        this.path = `${entryPath}/page/controller`;
    }
    listAll() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.c.request("GET", this.path);
        });
    }
    update(control) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.c.request("PUT", `${this.path}/${control.id}`, control);
        });
    }
    create(control) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.c.request("POST", this.path, control);
        });
    }
    get(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.c.request("GET", `${this.path}/${id}`);
        });
    }
    delete(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.c.request("DELETE", `${this.path}/${id}`);
        });
    }
    run(config) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.c
                .request("POST", `${this.path}-run`, Object.assign({ handle: "", default_path: "*", default_query: {}, default_params: {}, middleware: [] }, config))
                .then(res => res.result);
        });
    }
    getSnapshot() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.c.request("GET", `${this.path}-snapshot`);
        });
    }
    getSnapshotItems(items) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.c.request("POST", `${this.path}-snapshot-items`, items);
        });
    }
}
exports.B2Controller = B2Controller;
//# sourceMappingURL=controller.js.map