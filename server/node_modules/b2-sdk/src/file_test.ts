import test = require("blue-tape");
import { getTestClient } from "./test";
import { B2File, B2FileType } from "./file";
import PromiseBluebird = require("bluebird");

async function getFile() {
  return new B2File(await getTestClient(), "/sdk_test");
}

test("B2File.listAll", async function(t) {
  const f = await getFile();
  const files = await f.listAll();
  t.assert(Array.isArray(files), "works");
});

test("B2File.get", async function(t) {
  const f = await getFile();
  const file = await f.get("550edd05-e110-479a-8e5d-da259cb16e1b");
  t.assert(file && typeof file === "object", "works");
});

test("B2File.get-by-handle", async function(t) {
  const f = await getFile();
  const file = await f.getByHandle("test");
  t.assert(
    file &&
      typeof file === "object" &&
      file.id === "550edd05-e110-479a-8e5d-da259cb16e1b",
    "works"
  );
});

test("B2File.create", async function(t) {
  const f = await getFile();
  const file = B2FileType.createComponentFile({
    handle: "test_create_file",
    path: "/test_create_file",
    template: "CREATED BY SDK!",
    style: "body { color: green; }"
  });
  const serverFile = await f.create(file);
  t.assert(serverFile && typeof serverFile === "object", "works");
  await f.delete(serverFile.id);
});

test("B2File.update", async function(t) {
  const f = await getFile();
  const file = B2FileType.createComponentFile({
    handle: "test_update_file",
    path: "/test_update_file",
    template: "CREATED BY SDK!",
    style: "body { color: green; }"
  });
  let serverFile = await f.create(file);

  serverFile.content = "UPDATED!";
  serverFile.path = "/test_updated_";
  await f.update(serverFile);

  serverFile = await f.get(serverFile.id);

  t.deepEqual(
    {
      content: serverFile.content,
      path: serverFile.path
    },
    {
      content: "UPDATED!",
      path: "/test_updated_"
    },
    "works"
  );

  await f.delete(serverFile.id);
});

test("B2File.delete", async function(t) {
  const f = await getFile();
  const file = B2FileType.createComponentFile({
    handle: "test_delete_file",
    path: "/test_create_file",
    template: "CREATED BY SDK!",
    style: "body { color: green; }"
  });
  let serverFile = await f.create(file);
  await f.delete(serverFile.id);

  await t.shouldFail(f.get(serverFile.id));
});

test("B2File.walk", async function(t) {
  const createdIds: string[] = [];
  const f = await getFile();
  for (let i = 0; i < 5; i++) {
    const file = B2FileType.createComponentFile({
      handle: "test_walk_" + i,
      path: "/test_walk_" + i,
      template: "content_" + i,
      style: "body { color: green; }"
    });
    const serverFile = await f.create(file);
    createdIds.push(serverFile.id);
  }

  const ids: string[] = [];
  await f.walk(async function(file, i, n) {
    if (createdIds.indexOf(file.id) !== -1) {
      ids.push(file.id);
    }
  });

  t.equal(ids.length, createdIds.length, "works");

  await PromiseBluebird.map(createdIds, id => f.delete(id));
});

test("B2File.walkAndUpdate", async function(t) {
  const createdIds: string[] = [];
  const f = await getFile();
  for (let i = 0; i < 3; i++) {
    const file = B2FileType.createComponentFile({
      handle: "walkAndUpdate_" + i,
      path: "/walkAndUpdate_" + i,
      template: "content_" + i,
      style: "body { color: green; }"
    });
    const serverFile = await f.create(file);
    createdIds.push(serverFile.id);
  }

  const ids: string[] = [];
  await f.walkAndUpdate(async function(file, i, n) {
    if (createdIds.indexOf(file.id) === -1) {
      return;
    }
    file.content += "!";
    return true;
  });

  for (let i = 0; i < 3; i++) {
    const file = await f.get(createdIds[i]);
    t.equal(file.content, "content_" + i + "!");
  }

  await PromiseBluebird.map(createdIds, id => f.delete(id));
});
