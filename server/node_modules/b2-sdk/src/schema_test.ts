import test = require("blue-tape");
import { getTestClient } from "./test";
import { B2Schema, DataType } from "./schema";

const TEST_SCHEMA_ID = "b10749ac-5f35-40cf-9a3c-0af8c9e94b1f";

async function getSchema() {
  return new B2Schema(await getTestClient(), "/sdk_test");
}

test("B2Schema.listAllSchema", async function(t) {
  const s = await getSchema();
  const ss = await s.listAllSchema();
  t.assert(Array.isArray(ss), "works");
});

test("B2Schema.getSchema", async function(t) {
  const s = await getSchema();
  const so = await s.getSchema(TEST_SCHEMA_ID);
  t.assert(so && typeof so === "object", "works");
});

test("B2Schema.createSchema", async function(t) {
  const s = await getSchema();
  const so = await s.getSchema(TEST_SCHEMA_ID);
  delete so.id;
  delete so.module_schema_id;
  delete so.table_name;
  delete so.created_at;
  delete so.updated_at;
  so.handle = `test_create_schema`;
  so.name = `Test createSchema`;
  const created = await s.createSchema(so);
  t.deepEqual(created.props, so.props);
  await s.deleteSchema(created.id);
});

test("B2Schema.updateSchema", async function(t) {
  const s = await getSchema();
  const so = await s.getSchema(TEST_SCHEMA_ID);
  delete so.id;
  delete so.module_schema_id;
  delete so.table_name;
  delete so.created_at;
  delete so.updated_at;
  so.handle = `test_update_schema`;
  so.name = `Test updateSchema`;
  const created = await s.createSchema(so);
  created.name = `Test updateSchema updated`;
  await s.updateSchema(created);
  const updated = await s.getSchema(created.id);
  t.equal(updated.name, created.name);
  await s.deleteSchema(created.id);
});

test("B2Schema.createObject", async function(t) {
  const s = await getSchema();
  const obj = await s.createObject(TEST_SCHEMA_ID, {
    handle: "test_createObject"
  });
  await s.deleteObject(TEST_SCHEMA_ID, obj.id);
  t.assert(
    obj && typeof obj === "object" && typeof obj.id === "string",
    "works"
  );
});

test("B2Schema.updateObject", async function(t) {
  const s = await getSchema();
  const obj: any = await s.createObject(TEST_SCHEMA_ID, <any>{
    handle: "test_updateObject",
    name: "original"
  });

  obj.name = "updated";
  await s.updateObject(TEST_SCHEMA_ID, obj);

  const obj2: any = await s.getObject(TEST_SCHEMA_ID, obj.id);

  await s.deleteObject(TEST_SCHEMA_ID, obj.id);
  t.equals(obj.name, "updated", "works");
});

test("B2Schema.deleteObject", async function(t) {
  const s = await getSchema();
  const obj = await s.createObject(TEST_SCHEMA_ID, {
    handle: "test_deleteObject"
  });
  await s.deleteObject(TEST_SCHEMA_ID, obj.id);
  await t.shouldFail(s.getObject(TEST_SCHEMA_ID, obj.id));
});

test("B2Schema.getObject", async function(t) {
  const s = await getSchema();
  const obj = await s.createObject(TEST_SCHEMA_ID, {
    handle: "test_getObject"
  });
  const obj2 = await s.getObject(TEST_SCHEMA_ID, obj.id);
  await s.deleteObject(TEST_SCHEMA_ID, obj.id);
  t.equals(obj2.id, obj.id, "works");
});

test("B2Schema.getObjects", async function(t) {
  const s = await getSchema();
  const obj1 = await s.createObject(TEST_SCHEMA_ID, {
    handle: "test_getObjects1"
  });
  const obj2 = await s.createObject(TEST_SCHEMA_ID, {
    handle: "test_getObjects2"
  });
  const objs = await s.getObjects(TEST_SCHEMA_ID, [obj1.id, obj2.id]);
  await s.deleteObject(TEST_SCHEMA_ID, obj1.id);
  await s.deleteObject(TEST_SCHEMA_ID, obj2.id);
  t.equals(objs.length, 2, "works");
});

test("B2Schema.getObjectByHandle", async function(t) {
  const s = await getSchema();
  const obj = await s.createObject(TEST_SCHEMA_ID, {
    handle: "test_getObjectByHandle"
  });
  const obj2 = await s.getObjectByHandle(
    TEST_SCHEMA_ID,
    "test_getObjectByHandle"
  );
  await s.deleteObject(TEST_SCHEMA_ID, obj.id);
  t.equals(obj2.id, obj.id, "works");
});

test("B2Schema.query", async function(t) {
  const s = await getSchema();
  const r = await s.query(TEST_SCHEMA_ID);
  t.assert(r.count > 0 && r.items && Array.isArray(r.items), "works");
});

test("B2Schema.walkObjects", async function(t) {
  const s = await getSchema();
  const { count } = await s.query(TEST_SCHEMA_ID);
  let walked = 0;
  await s.walkObjects(TEST_SCHEMA_ID, async function(obj, i, n) {
    walked++;
  });
  t.equal(walked, count, "walked === count");
});

test("B2Schema.walkAndUpdateObjects", async function(t) {
  const s = await getSchema();
  const obj: any = await s.createObject(TEST_SCHEMA_ID, <any>{
    handle: "test_walkAndUpdateObjects",
    name: "original"
  });
  await s.walkAndUpdateObjects(TEST_SCHEMA_ID, async function(
    o: any,
    i: number,
    n: number
  ) {
    if (o.id == obj.id) {
      o.name = "updated";
      return { save: true, done: true };
    }
  });
  const obj2: any = await s.getObject(TEST_SCHEMA_ID, obj.id);
  await s.deleteObject(TEST_SCHEMA_ID, obj.id);
  t.equals(obj2.name, "updated", "works");
});

test("B2Schema.createSchema", async function(t) {
  const s = await getSchema();
  const schema = await s.createSchema({
    name: "SDK Created",
    handle: "sdk_created",
    props: [{ key: "id", type: DataType.string, label: "ID" }]
  });
  t.assert(typeof schema.id === "string", "has id");
  t.assert(typeof schema.created_at === "string", "has created_at");

  await s.deleteSchema(schema.id);
});

test("B2Schema.updateSchema", async function(t) {
  const s = await getSchema();
  const schema = await s.createSchema({
    name: "SDK updateSchema",
    handle: "sdk_updateSchema",
    props: [{ key: "id", type: DataType.string, label: "ID" }]
  });
  const updated = await s.updateSchema(
    Object.assign({}, schema, {
      name: "Updated"
    })
  );
  t.equal(updated.name, "Updated", "name updated");
  await s.deleteSchema(schema.id);
});

test("B2Schema.deleteSchema", async function(t) {
  const s = await getSchema();
  const schema = await s.createSchema({
    name: "SDK deleteSchema",
    handle: "sdk_deleteSchema",
    props: [{ key: "id", type: DataType.string, label: "ID" }]
  });
  await s.deleteSchema(schema.id);
  t.shouldFail(s.getSchema(schema.id));
});
