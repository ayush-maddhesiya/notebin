import { B2Client } from "./client";
import { SnapshotItem } from "./archive";

export interface ControllerListEntry {
  id: string;
  handle: string;
  default_path: string;
  description: string;
  exported: boolean;
  created_at: string;
  updated_at: string;
}

export interface ControllerEntry {
  id?: string;
  handle: string;
  default_params?: { [key: string]: string };
  default_query?: { [key: string]: string };
  default_path?: string;
  description?: string;
  exported?: boolean;
  methods: string[];
  middleware?: string[];
  script?: string;
  script_uuid?: string;
  created_at?: string;
  updated_at?: string;
  revision?: string;
}

export interface ControllerConfig {
  handle?: string;
  default_path?: string;
  default_query?: any;
  default_params?: any;
  script: string;
  middleware?: string[];
  method: "GET" | "POST" | "PUT" | "DELETE";
  body?: any;
}

export class B2Controller {
  private c: B2Client;
  private path: string;

  constructor(
    client: B2Client,
    entryPath: string,
    public readonly isRef: boolean = false
  ) {
    this.c = client;
    this.path = `${entryPath}/page/controller`;
  }

  /** List all controllers */
  async listAll(): Promise<ControllerListEntry[]> {
    return await this.c.request("GET", this.path);
  }
  /** Update controller */
  async update(control: ControllerEntry): Promise<ControllerEntry> {
    return await this.c.request("PUT", `${this.path}/${control.id}`, control);
  }
  /** Create controller */
  async create(control: ControllerEntry): Promise<ControllerEntry> {
    return await this.c.request("POST", this.path, control);
  }
  /** Get a controller by id */
  async get(id: string): Promise<ControllerEntry> {
    return await this.c.request("GET", `${this.path}/${id}`);
  }
  /** Delete controller by id */
  async delete(id: string) {
    return await this.c.request("DELETE", `${this.path}/${id}`);
  }
  async run<T = any>(config: ControllerConfig): Promise<T> {
    return await this.c
      .request("POST", `${this.path}-run`, {
        handle: "",
        default_path: "*",
        default_query: {},
        default_params: {},
        middleware: [],
        ...config
      })
      .then(res => res.result);
  }
  async getSnapshot(): Promise<SnapshotItem[]> {
    return await this.c.request("GET", `${this.path}-snapshot`);
  }
  async getSnapshotItems(items: SnapshotItem[]): Promise<ControllerEntry[]> {
    return await this.c.request("POST", `${this.path}-snapshot-items`, items);
  }
}
