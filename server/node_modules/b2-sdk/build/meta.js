"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class B2Meta {
    constructor(data) {
        this.meta = data;
        this._referencedModules = [];
        this._allModules = {};
        this.childApps = [];
        this.findModules(this.meta);
    }
    get name() {
        return this.meta.name;
    }
    get publicURL() {
        return this.meta.basePublicURL;
    }
    get referencedModules() {
        return this._referencedModules;
    }
    get allModules() {
        return this._allModules;
    }
    get entries() {
        return this.childApps;
    }
    findModules(app, path = "") {
        app.modules.forEach(m => {
            let um = this._referencedModules.find(um => um.type === m.type);
            if (!um) {
                um = Object.assign({}, m, { paths: [] });
                this._referencedModules.push(um);
            }
            um.paths.push(path);
            let il;
            if (m.type in this._allModules) {
                il = this._allModules[m.type];
            }
            else {
                il = [];
                this._allModules[m.type] = il;
            }
            il.push({ id: m.metadata["id"], path, metadata: m.metadata });
            if (m.type === "composer") {
                let childApp;
                const entries = m.metadata["entries"];
                Object.keys(entries).forEach(childPath => {
                    const mergedPath = path + (childPath === "/__root" ? "/" : childPath);
                    const childApp = entries[childPath];
                    this.childApps.push({
                        name: childApp.name,
                        path: mergedPath,
                        modules: childApp.modules.map(m => m.type),
                        refs: childApp.modules.reduce((list, m) => {
                            if (m.metadata.$ref) {
                                return [...list, m.type];
                            }
                            else {
                                return list;
                            }
                        }, [])
                    });
                    this.findModules(childApp, mergedPath);
                });
            }
        });
    }
}
exports.B2Meta = B2Meta;
function parseMeta(data) {
    return new B2Meta(data);
}
exports.parseMeta = parseMeta;
//# sourceMappingURL=meta.js.map