import { B2Client } from "./client";
import { B2Config } from "./config";
import { B2File, FileListEntry, FileEntry } from "./file";
import { B2Controller, ControllerListEntry, ControllerEntry } from "./controller";
import { B2Schema } from "./schema";
import { Entry } from "./meta";
import { B2Archive } from "./archive";
import { B2Env } from "./env";
import { B2Asset } from "./asset";
export { FileListEntry, FileEntry, ControllerListEntry, ControllerEntry };
export declare class B2Entry {
    private meta;
    get name(): string;
    private _path;
    get path(): string;
    private _file;
    get file(): B2File;
    private _controller;
    get controller(): B2Controller;
    private _schema;
    get schema(): B2Schema;
    private _env;
    get env(): B2Env;
    private _asset;
    get asset(): B2Asset;
    constructor(c: B2Client, meta: Entry, hasAsset: boolean);
}
export declare class B2 {
    private c;
    private meta;
    private entryMap;
    private _archive;
    private _asset;
    constructor(config: B2Config);
    init(): Promise<void>;
    get publicURL(): string;
    get entries(): Entry[];
    get name(): string;
    get referencedModules(): import("./meta").ReferencedModules[];
    get modules(): {
        [key: string]: import("./meta").ModuleInstance[];
    };
    get archive(): B2Archive;
    get asset(): B2Asset;
    entry(name: string): B2Entry;
}
export declare function connect(config: string | B2Config): Promise<B2>;
